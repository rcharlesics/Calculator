//--------------------------------------------------------------------------------------------------
// Generated using GreenHouse Modeling Library v 1.3.8
// From: Calculator Display Interface
// Please do not edit this file as it will be overwritten the next time the application flow is
// regenerated.
//--------------------------------------------------------------------------------------------------
#pragma once

#include <limits>

#include <gtest/gtest.h>
#include <gmock/gmock-matchers.h>

#include <QJsonDocument>

#include <Calculator/display.hpp>

using namespace testing;

class DisplayTestRpc : public GreenHouse::RPCServiceInterface
{
    public:
    using GreenHouse::RPCServiceInterface::RPCServiceInterface;
    
    QList<QJsonObject> messages;
    
    // GreenHouse::RPCServiceInterface interface
    protected:
    void sendPayload(const QByteArray &data) override
    {
        QJsonParseError err;
        QJsonDocument doc = QJsonDocument::fromJson(data, &err);
        if (err.error == QJsonParseError::NoError) {
                messages.append(doc.object());
        }
    }
};

class DisplayInterfaceTest : public Test
{
    // Test interface
    protected:
    void SetUp();
    void TearDown();
    
    Calculator::Display *iface;
    DisplayTestRpc *m_rpc;
    GreenHouse::Context m_ctx;
};

void DisplayInterfaceTest::SetUp()
{
    m_rpc = new DisplayTestRpc(&m_ctx);
    iface = new Calculator::Display;
    m_ctx.store(iface);
}

void DisplayInterfaceTest::TearDown()
{
}

TEST_F(DisplayInterfaceTest, dotclicked)
{
    
    iface->dotclicked();
    
}


TEST_F(DisplayInterfaceTest, dotclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("dotclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, dotclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->dotclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, dotclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("dotclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, dotclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->dotclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, multclicked)
{
    
    iface->multclicked();
    
}


TEST_F(DisplayInterfaceTest, multclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("multclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, multclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->multclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, multclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("multclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, multclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->multclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, addclicked)
{
    
    iface->addclicked();
    
}


TEST_F(DisplayInterfaceTest, addclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("addclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, addclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->addclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, addclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("addclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, addclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->addclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, subclicked)
{
    
    iface->subclicked();
    
}


TEST_F(DisplayInterfaceTest, subclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("subclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, subclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->subclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, subclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("subclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, subclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->subclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, divclicked)
{
    
    iface->divclicked();
    
}


TEST_F(DisplayInterfaceTest, divclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("divclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, divclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->divclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, divclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("divclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, divclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->divclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, digitclicked)
{
    
    iface->digitclicked(QString());
    
}


TEST_F(DisplayInterfaceTest, digitclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("digitclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({ { QStringLiteral("digit"), QStringLiteral("Lorem Ipsum Test STR") } }) }
    }));
}

TEST_F(DisplayInterfaceTest, digitclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->digitclicked(QString());
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, digitclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("digitclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({ { QStringLiteral("digit"), QStringLiteral("Lorem Ipsum Test STR") } }) }
    }));
}

TEST_F(DisplayInterfaceTest, digitclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->digitclicked(QString());
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, negclicked)
{
    
    iface->negclicked();
    
}


TEST_F(DisplayInterfaceTest, negclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("negclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, negclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->negclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, negclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("negclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, negclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->negclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, sqrtclicked)
{
    
    iface->sqrtclicked();
    
}


TEST_F(DisplayInterfaceTest, sqrtclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("sqrtclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, sqrtclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->sqrtclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, sqrtclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("sqrtclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, sqrtclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->sqrtclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, percclicked)
{
    
    iface->percclicked();
    
}


TEST_F(DisplayInterfaceTest, percclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("percclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, percclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->percclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, percclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("percclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, percclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->percclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, fracclicked)
{
    
    iface->fracclicked();
    
}


TEST_F(DisplayInterfaceTest, fracclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("fracclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, fracclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->fracclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, fracclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("fracclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, fracclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->fracclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, eqclicked)
{
    
    iface->eqclicked();
    
}


TEST_F(DisplayInterfaceTest, eqclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("eqclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, eqclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->eqclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, eqclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("eqclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, eqclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->eqclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, backclicked)
{
    
    iface->backclicked();
    
}


TEST_F(DisplayInterfaceTest, backclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("backclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, backclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->backclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, backclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("backclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, backclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->backclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, clearclicked)
{
    
    iface->clearclicked();
    
}


TEST_F(DisplayInterfaceTest, clearclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("clearclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, clearclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->clearclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, clearclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("clearclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, clearclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->clearclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, ceclicked)
{
    
    iface->ceclicked();
    
}


TEST_F(DisplayInterfaceTest, ceclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("ceclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, ceclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->ceclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, ceclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("ceclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, ceclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->ceclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, mrclicked)
{
    
    iface->mrclicked();
    
}


TEST_F(DisplayInterfaceTest, mrclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("mrclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, mrclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->mrclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, mrclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("mrclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, mrclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->mrclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, mcclicked)
{
    
    iface->mcclicked();
    
}


TEST_F(DisplayInterfaceTest, mcclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("mcclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, mcclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->mcclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, mcclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("mcclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, mcclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->mcclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, msclicked)
{
    
    iface->msclicked();
    
}


TEST_F(DisplayInterfaceTest, msclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("msclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, msclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->msclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, msclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("msclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, msclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->msclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, mplusclicked)
{
    
    iface->mplusclicked();
    
}


TEST_F(DisplayInterfaceTest, mplusclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("mplusclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, mplusclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->mplusclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, mplusclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("mplusclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, mplusclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->mplusclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, displayNums)
{
    auto oldValue = iface->displayNums();
    auto newValue = QStringLiteral("Lorem Ipsum Test STR");
    
    bool changeSignalEmitted = false;
    QObject::connect(iface, &Calculator::Display::displayNumsChanged, [&]() { changeSignalEmitted = true; });
    
    iface->setDisplayNums(newValue);
    ASSERT_TRUE(changeSignalEmitted);
    ASSERT_NE(iface->displayNums(), oldValue);
    ASSERT_EQ(iface->displayNums(), newValue);
}


TEST_F(DisplayInterfaceTest, displayNumsRPCSet)
{
    auto oldValue = iface->displayNums();
    auto newValue = QStringLiteral("Lorem Ipsum Test STR");
    
    bool changeSignalEmitted = false;
    QObject::connect(iface, &Calculator::Display::displayNumsChanged, [&]() { changeSignalEmitted = true; });
    
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    iface->handleMessage(GreenHouse::PropertyValueSet, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("displayNums") },
        { QStringLiteral("VALUE"), QStringLiteral("Lorem Ipsum Test STR") }
    }));
    ASSERT_TRUE(changeSignalEmitted);
    ASSERT_NE(iface->displayNums(), oldValue);
    ASSERT_EQ(iface->displayNums(), newValue);
}

TEST_F(DisplayInterfaceTest, displayNumsRPCNotify)
{
    auto oldValue = iface->displayNums();
    auto newValue = QStringLiteral("Lorem Ipsum Test STR");
    
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    auto messageCount = m_rpc->messages.length();
    iface->setDisplayNums(newValue);
    auto delta = m_rpc->messages.length() - messageCount;
    messageCount = m_rpc->messages.length();
    
    ASSERT_TRUE(delta >= 1);
    
    iface->setDisplayNums(oldValue, false);
    
    ASSERT_TRUE(delta - (m_rpc->messages.length() - messageCount) == 1);
}

TEST_F(DisplayInterfaceTest, displayNumsRPCDisabledSet)
{
    auto oldValue = iface->displayNums();
    auto newValue = QStringLiteral("Lorem Ipsum Test STR");
    
    bool changeSignalEmitted = false;
    QObject::connect(iface, &Calculator::Display::displayNumsChanged, [&]() { changeSignalEmitted = true; });
    
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    iface->handleMessage(GreenHouse::PropertyValueSet, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("displayNums") },
        { QStringLiteral("VALUE"), QStringLiteral("Lorem Ipsum Test STR") }
    }));
    ASSERT_TRUE(!changeSignalEmitted);
    ASSERT_EQ(iface->displayNums(), oldValue);
    ASSERT_NE(iface->displayNums(), newValue);
}

TEST_F(DisplayInterfaceTest, displayNumsRPCDisabledNotify)
{
    auto oldValue = iface->displayNums();
    auto newValue = QStringLiteral("Lorem Ipsum Test STR");
    
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->setDisplayNums(newValue);
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->setDisplayNums(oldValue, false);
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, DisplayRPCPublish)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    iface->publishObjectState();
    ASSERT_TRUE(m_rpc->messages.length() == 1);
}

TEST_F(DisplayInterfaceTest, DisplayDisabledRPCPublish)
{iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    iface->publishObjectState();
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}



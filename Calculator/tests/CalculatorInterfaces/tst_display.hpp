//--------------------------------------------------------------------------------------------------
// Generated using GreenHouse Modeling Library v 1.3.8
// From: Calculator Display Interface
// Please do not edit this file as it will be overwritten the next time the application flow is
// regenerated.
//--------------------------------------------------------------------------------------------------
#pragma once

#include <limits>

#include <gtest/gtest.h>
#include <gmock/gmock-matchers.h>

#include <QJsonDocument>

#include <Calculator/display.hpp>

using namespace testing;

class DisplayTestRpc : public GreenHouse::RPCServiceInterface
{
    public:
    using GreenHouse::RPCServiceInterface::RPCServiceInterface;
    
    QList<QJsonObject> messages;
    
    // GreenHouse::RPCServiceInterface interface
    protected:
    void sendPayload(const QByteArray &data) override
    {
        QJsonParseError err;
        QJsonDocument doc = QJsonDocument::fromJson(data, &err);
        if (err.error == QJsonParseError::NoError) {
                messages.append(doc.object());
        }
    }
};

class DisplayInterfaceTest : public Test
{
    // Test interface
    protected:
    void SetUp();
    void TearDown();
    
    Calculator::Display *iface;
    DisplayTestRpc *m_rpc;
    GreenHouse::Context m_ctx;
};

void DisplayInterfaceTest::SetUp()
{
    m_rpc = new DisplayTestRpc(&m_ctx);
    iface = new Calculator::Display;
    m_ctx.store(iface);
}

void DisplayInterfaceTest::TearDown()
{
}

TEST_F(DisplayInterfaceTest, digitoneclicked)
{
    
    iface->digitoneclicked();
    
}


TEST_F(DisplayInterfaceTest, digitoneclickedRPCMethod)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("digitoneclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, digitoneclickedRPCMethodNotify)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->digitoneclicked();
    
    // NOTE: We allow more than one message being generated because methods can emit signals
    ASSERT_TRUE(m_rpc->messages.length() >= 1);
}


TEST_F(DisplayInterfaceTest, digitoneclickedDisabledRPCMethod)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    iface->handleMessage(GreenHouse::MethodInvoked, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("digitoneclicked") },
        { QStringLiteral("ARGS_TAG"), QJsonObject({  }) }
    }));
}

TEST_F(DisplayInterfaceTest, digitoneclickedDisabledRPCMethodNotify)
{
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->digitoneclicked();
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, displayNums)
{
    auto oldValue = iface->displayNums();
    auto newValue = std::numeric_limits<float>::max();
    
    bool changeSignalEmitted = false;
    QObject::connect(iface, &Calculator::Display::displayNumsChanged, [&]() { changeSignalEmitted = true; });
    
    iface->setDisplayNums(newValue);
    ASSERT_TRUE(changeSignalEmitted);
    ASSERT_NE(iface->displayNums(), oldValue);
    ASSERT_EQ(iface->displayNums(), newValue);
}


TEST_F(DisplayInterfaceTest, displayNumsRPCSet)
{
    auto oldValue = iface->displayNums();
    auto newValue = std::numeric_limits<float>::max();
    
    bool changeSignalEmitted = false;
    QObject::connect(iface, &Calculator::Display::displayNumsChanged, [&]() { changeSignalEmitted = true; });
    
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    iface->handleMessage(GreenHouse::PropertyValueSet, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("displayNums") },
        { QStringLiteral("VALUE"), std::numeric_limits<float>::max() }
    }));
    ASSERT_TRUE(changeSignalEmitted);
    ASSERT_NE(iface->displayNums(), oldValue);
    ASSERT_EQ(iface->displayNums(), newValue);
}

TEST_F(DisplayInterfaceTest, displayNumsRPCNotify)
{
    auto oldValue = iface->displayNums();
    auto newValue = std::numeric_limits<float>::max();
    
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    auto messageCount = m_rpc->messages.length();
    iface->setDisplayNums(newValue);
    auto delta = m_rpc->messages.length() - messageCount;
    messageCount = m_rpc->messages.length();
    
    ASSERT_TRUE(delta >= 1);
    
    iface->setDisplayNums(oldValue, false);
    
    ASSERT_TRUE(delta - (m_rpc->messages.length() - messageCount) == 1);
}

TEST_F(DisplayInterfaceTest, displayNumsRPCDisabledSet)
{
    auto oldValue = iface->displayNums();
    auto newValue = std::numeric_limits<float>::max();
    
    bool changeSignalEmitted = false;
    QObject::connect(iface, &Calculator::Display::displayNumsChanged, [&]() { changeSignalEmitted = true; });
    
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    iface->handleMessage(GreenHouse::PropertyValueSet, QJsonObject({
        { QStringLiteral("NAME"), QStringLiteral("displayNums") },
        { QStringLiteral("VALUE"), std::numeric_limits<float>::max() }
    }));
    ASSERT_TRUE(!changeSignalEmitted);
    ASSERT_EQ(iface->displayNums(), oldValue);
    ASSERT_NE(iface->displayNums(), newValue);
}

TEST_F(DisplayInterfaceTest, displayNumsRPCDisabledNotify)
{
    auto oldValue = iface->displayNums();
    auto newValue = std::numeric_limits<float>::max();
    
    iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->setDisplayNums(newValue);
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    
    iface->setDisplayNums(oldValue, false);
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}


TEST_F(DisplayInterfaceTest, DisplayRPCPublish)
{
    iface->enableRPC();
    ASSERT_TRUE(iface->rpcEnabled());
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    iface->publishObjectState();
    ASSERT_TRUE(m_rpc->messages.length() == 1);
}

TEST_F(DisplayInterfaceTest, DisplayDisabledRPCPublish)
{iface->disableRPC();
    ASSERT_TRUE(!iface->rpcEnabled());
    
    ASSERT_TRUE(m_rpc->messages.length() == 0);
    iface->publishObjectState();
    ASSERT_TRUE(m_rpc->messages.length() == 0);
}



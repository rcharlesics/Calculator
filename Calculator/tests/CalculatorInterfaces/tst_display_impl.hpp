//--------------------------------------------------------------------------------------------------
// Generated using GreenHouse Modeling Library v 1.3.6
// From: Calculator Display Interface
// Please do not edit this file as it will be overwritten the next time the application flow is
// regenerated.
//--------------------------------------------------------------------------------------------------
#pragma once

#include <limits>

#include <QCoreApplication>

#include <gtest/gtest.h>
#include <gmock/gmock-matchers.h>

#include <QJsonDocument>

#include <applicationpluginmanager.h>

#include <Calculator/display.hpp>

using namespace testing;

class DisplayImplTestRpc : public GreenHouse::RPCServiceInterface
{
    public:
    using GreenHouse::RPCServiceInterface::RPCServiceInterface;
    
    QList<QJsonObject> messages;
    
    // GreenHouse::RPCServiceInterface interface
    protected:
    void sendPayload(const QByteArray &data) override
    {
        QJsonParseError err;
        QJsonDocument doc = QJsonDocument::fromJson(data, &err);
        if (err.error == QJsonParseError::NoError) {
                messages.append(doc.object());
        }
    }
};

class DisplayInterfaceImplTest : public Test
{
    // Test interface
    protected:
    void SetUp();
    void TearDown();
    
    Calculator::Display * iface;
    ApplicationPluginManager *m_applicationPluginManager;
    DisplayImplTestRpc *m_rpc;
    GreenHouse::Context m_ctx;
};

void DisplayInterfaceImplTest ::SetUp()
{
    m_rpc = new DisplayImplTestRpc(&m_ctx);
    QDir pluginDir;
    pluginDir = QDir(qApp->applicationDirPath());
    pluginDir.cdUp();
    pluginDir.cdUp();
    pluginDir.cd(QStringLiteral("plugins"));
    m_applicationPluginManager = new ApplicationPluginManager(pluginDir.absoluteFilePath(QStringLiteral("config.json")),
    pluginDir.absolutePath());
    if (m_applicationPluginManager)
        m_applicationPluginManager->inject(&m_ctx);
    iface = m_ctx.get<Calculator::Display>();
    if (!iface) {
            iface = new Calculator::Display;
        m_ctx.store(iface);
    }
}

void DisplayInterfaceImplTest ::TearDown()
{
    delete m_applicationPluginManager;
}

TEST_F(DisplayInterfaceImplTest, displayNums_Imp)
{
    auto oldValue = iface->displayNums();
    auto newValue = std::numeric_limits<float>::max();
    
    bool changeSignalEmitted = false;
    QObject::connect(iface, &Calculator::Display::displayNumsChanged, [&]() { changeSignalEmitted = true; });
    
    iface->setDisplayNums(newValue);
    ASSERT_TRUE(changeSignalEmitted);
    ASSERT_NE(iface->displayNums(), oldValue);
    ASSERT_EQ(iface->displayNums(), newValue);
}


